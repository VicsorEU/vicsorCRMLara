@extends('layouts.app')

@section('title', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
@section('page_title', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')

@section('content')
    @php
        $timezones  = \DateTimeZone::listIdentifiers();
        $countries  = [
            ['UA','–£–∫—Ä–∞–∏–Ω–∞'], ['PL','–ü–æ–ª—å—à–∞'], ['DE','–ì–µ—Ä–º–∞–Ω–∏—è'],
            ['US','–°–®–ê'], ['GB','–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è'], ['CZ','–ß–µ—Ö–∏—è'],
        ];

        // –°–æ–±–∏—Ä–∞–µ–º initial –≤ PHP, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ @json
        $initial = $general ?? [
            'company_name' => '',
            'country'      => 'UA',
            'timezone'     => config('app.timezone', 'UTC'),
            'logo_url'     => null,
            'workdays'     => ['mon','tue','wed','thu','fri'],
            'intervals'    => [
                ['start' => '09:00', 'end' => '18:00']
            ],
        ];
    @endphp

    <div class="space-y-6" x-data="generalSettings()">
        {{-- –ü–æ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ --}}
        <div class="bg-white border rounded-2xl shadow-soft">
            <div class="px-5 py-3 border-b font-medium">–ü–æ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏</div>
            <div class="p-5">
                <nav class="flex flex-wrap gap-2">
                    <a href="{{ route('settings.index') }}"
                       class="px-3 py-1.5 rounded-lg border {{ ($section??'general')==='general' ? 'bg-brand-50 border-brand-200 text-brand-700' : 'hover:bg-slate-50' }}">
                        –û–±—â–∏–µ
                    </a>
                    <a href="{{ route('settings.index', ['section'=>'projects']) }}"
                       class="px-3 py-1.5 rounded-lg border {{ ($section??'general')==='projects' ? 'bg-brand-50 border-brand-200 text-brand-700' : 'hover:bg-slate-50' }}">
                        –ü—Ä–æ–µ–∫—Ç—ã
                    </a>
                </nav>
            </div>
        </div>

        {{-- –û–±—â–∏–µ --}}
        @if(($section??'general')==='general')
            <div class="bg-white border rounded-2xl shadow-soft">
                <div class="px-5 py-3 border-b font-medium">–û–±—â–∏–µ</div>

                <div class="p-5 grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-6">
                    {{-- –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ --}}
                    <div class="md:col-span-1 text-slate-600 pt-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</div>
                    <div class="md:col-span-2">
                        <input x-model="form.company_name" class="w-full border rounded-lg px-3 py-2" required>
                        <div class="text-xs text-slate-500 mt-1">
                            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–µ—á–∞—Ç–Ω—ã—Ö / –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
                        </div>
                    </div>

                    {{-- –°—Ç—Ä–∞–Ω–∞ --}}
                    <div class="md:col-span-1 text-slate-600 pt-2">–°—Ç—Ä–∞–Ω–∞</div>
                    <div class="md:col-span-2">
                        <select x-model="form.country" class="w-full border rounded-lg px-3 py-2" x-init="$nextTick(() => $el.value = form.country)">
                            <template x-for="opt in countries" :key="opt[0]">
                                <option :value="opt[0]" x-text="opt[1]"></option>
                            </template>
                        </select>
                        <div class="text-xs text-slate-500 mt-1">
                            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        </div>
                    </div>

                    {{-- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å --}}
                    <div class="md:col-span-1 text-slate-600 pt-2">–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</div>
                    <div class="md:col-span-2">
                        <select x-model="form.timezone" class="w-full border rounded-lg px-3 py-2" required>
                            @foreach($timezones as $tz)
                                <option value="{{ $tz }}">{{ $tz }}</option>
                            @endforeach
                        </select>
                        <div class="text-xs text-slate-500 mt-1">
                            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
                        </div>
                    </div>

                    {{-- –õ–æ–≥–æ—Ç–∏–ø --}}
                    <div class="md:col-span-1 text-slate-600 pt-2">–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏</div>
                    <div class="md:col-span-2">
                        <div class="w-56 h-56 border rounded-xl grid place-items-center overflow-hidden relative group">
                            <!-- –ü–ª—é—Å, –µ—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–µ—Ç -->
                            <template x-if="!form.logo_url">
                                <button type="button" @click="$refs.logoInput.click()"
                                        class="text-3xl text-slate-400 group-hover:text-slate-600">+</button>
                            </template>

                            <!-- –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ -->
                            <template x-if="form.logo_url">
                                <img :src="form.logo_url" alt="logo" class="object-contain w-full h-full">
                            </template>

                            <!-- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è -->
                            <template x-if="form.logo_url">
                                <button type="button" @click="deleteLogo"
                                        class="absolute top-2 right-2 px-2 py-1 rounded-lg bg-white/90 border hover:bg-white shadow">
                                    üóë
                                </button>
                            </template>

                            <input type="file" class="hidden" x-ref="logoInput" accept="image/*" @change="uploadLogo($event)">
                        </div>
                        <div class="text-xs text-slate-500 mt-1">–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö</div>
                    </div>


                    {{-- –†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫ --}}
                    <div class="md:col-span-1 text-slate-600 pt-2">–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫</div>
                    <div class="md:col-span-2 space-y-3">
                        <!-- –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ -->
                        <template x-for="(it, idx) in form.intervals" :key="idx">
                            <div class="border rounded-xl p-3 space-y-2">
                                <!-- –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≠–¢–û–ì–û –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ -->
                                <div class="flex flex-wrap gap-2">
                                    <template x-for="d in days" :key="d.code">
                                        <label class="inline-flex items-center gap-2 px-2 py-1 rounded-lg border cursor-pointer"
                                               :class="it.days.includes(d.code) ? 'bg-brand-50 border-brand-200' : 'hover:bg-slate-50'">
                                            <input type="checkbox" class="accent-brand-600"
                                                   :checked="it.days.includes(d.code)"
                                                   @change="toggleIntervalDay(idx, d.code)">
                                            <span x-text="d.label"></span>
                                        </label>
                                    </template>
                                </div>

                                <!-- –í—Ä–µ–º—è -->
                                <div class="flex items-center gap-2">
                                    <input type="time" x-model="form.intervals[idx].start" class="border rounded-lg px-3 py-2">
                                    <span>‚Äî</span>
                                    <input type="time" x-model="form.intervals[idx].end" class="border rounded-lg px-3 py-2">

                                    <button type="button" class="px-2 py-2 rounded-lg border text-red-600 ml-auto"
                                            @click="removeInterval(idx)">üóëÔ∏è</button>
                                </div>
                            </div>
                        </template>

                        <button type="button" class="px-3 py-2 rounded-lg border w-max" @click="addInterval">
                            + –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
                        </button>
                    </div>



                    <div class="md:col-span-3 flex justify-end">
                        <button @click="save" class="px-4 py-2 rounded-lg bg-brand-600 text-white hover:bg-brand-700">
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        @endif

        @include('shared.toast')
    </div>

    <script>
        function generalSettings(){
            // –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–µ–Ω–¥–∞ (—Å–º. SettingsController@index -> $initial)
            const initial = @json($initial, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);

            // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            const normalize = (s) => {
                const defWorkdays = ['mon','tue','wed','thu','fri'];
                const base = {
                    company_name: '',
                    country: 'UA',
                    timezone: 'UTC',
                    logo_url: null,
                    workdays: defWorkdays.slice(),
                    intervals: [{ days: defWorkdays.slice(), start: '09:00', end: '18:00' }],
                };
                const out = Object.assign({}, base, s || {});
                out.workdays = Array.isArray(out.workdays) && out.workdays.length ? out.workdays : defWorkdays.slice();

                if (!Array.isArray(out.intervals) || !out.intervals.length) {
                    out.intervals = [{ days: out.workdays.slice(), start: '09:00', end: '18:00' }];
                } else {
                    // –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç days, –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    out.intervals = out.intervals.map(it => ({
                        days: Array.isArray(it?.days) ? it.days.slice() : out.workdays.slice(),
                        start: it?.start || '09:00',
                        end:   it?.end   || '18:00',
                    }));
                }
                return out;
            };

            return {
                countries: @json($countries),
                days: [
                    {code:'mon',label:'–ü–Ω'}, {code:'tue',label:'–í—Ç'}, {code:'wed',label:'–°—Ä'},
                    {code:'thu',label:'–ß—Ç'}, {code:'fri',label:'–ü—Ç'}, {code:'sat',label:'–°–±'},
                    {code:'sun',label:'–í—Å'},
                ],

                // –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
                form: normalize(initial),

                // ===== –†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ =====
                toggleIntervalDay(idx, code){
                    const it = this.form.intervals[idx];
                    if (!it) return;
                    if (!Array.isArray(it.days)) it.days = [];
                    const i = it.days.indexOf(code);
                    if (i >= 0) it.days.splice(i,1); else it.days.push(code);
                },

                // –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–±–µ–∑ –∫–æ–º–ø–æ–∑–µ—Ä–∞/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
                addInterval(){
                    this.form.intervals.push({ days: [], start: '09:00', end: '18:00' }); // –¥–Ω–∏ –ø—É—Å—Ç—ã–µ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç–µ –≤ –±–ª–æ–∫–µ
                },

                removeInterval(idx){
                    if (this.form.intervals.length === 1) {
                        window.toast?.('–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª');
                        return;
                    }
                    this.form.intervals.splice(idx,1);
                },

                // ===== –õ–æ–≥–æ—Ç–∏–ø =====
                async uploadLogo(e){
                    const file = e.target.files?.[0];
                    if(!file) return;
                    const fd = new FormData();
                    fd.append('file', file);

                    try{
                        const r = await fetch(@json(route('settings.logo.upload')), {
                            method:'POST',
                            headers:{'X-CSRF-TOKEN': @json(csrf_token()), 'Accept':'application/json'},
                            body: fd, credentials:'same-origin'
                        });
                        const data = await r.json();
                        if(!r.ok){ console.error(data); window.toast?.('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø'); return; }
                        this.form.logo_url = data.url;
                        window.toast?.('–õ–æ–≥–æ—Ç–∏–ø –æ–±–Ω–æ–≤–ª—ë–Ω');
                    }catch(err){ console.error(err); window.toast?.('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'); }
                    e.target.value = '';
                },

                async deleteLogo(){
                    if (!this.form.logo_url) return;
                    if (!confirm('–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø?')) return;

                    try{
                        const r = await fetch(@json(route('settings.logo.delete')), {
                            method: 'DELETE',
                            headers: {'X-CSRF-TOKEN': @json(csrf_token()), 'Accept': 'application/json'},
                            credentials: 'same-origin'
                        });
                        const data = await r.json().catch(()=>({}));
                        if(!r.ok){ console.error(data); window.toast?.('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø'); return; }
                        this.form.logo_url = null;
                        window.toast?.('–õ–æ–≥–æ—Ç–∏–ø —É–¥–∞–ª—ë–Ω');
                    }catch(e){
                        console.error(e);
                        window.toast?.('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
                    }
                },

                // ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ =====
                async save(){
                    // –≤–∞–ª–∏–¥–∞—Ü–∏—è: —É –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã –¥–Ω–∏
                    const bad = (this.form.intervals || []).findIndex(it => !it.days || !it.days.length);
                    if (bad !== -1){
                        window.toast?.('–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤');
                        return;
                    }

                    // —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    this.form = normalize(this.form);

                    try{
                        const r = await fetch(@json(route('settings.general.save')), {
                            method:'POST',
                            headers:{
                                'Accept':'application/json',
                                'Content-Type':'application/json',
                                'X-Requested-With':'XMLHttpRequest',
                                'X-CSRF-TOKEN': @json(csrf_token())
                            },
                            body: JSON.stringify(this.form),
                            credentials:'same-origin'
                        });
                        const data = await r.json().catch(()=>({}));
                        if(!r.ok){ console.error(data); window.toast?.('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'); return; }
                        window.toast?.('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                    }catch(err){ console.error(err); window.toast?.('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'); }
                },
            }
        }
    </script>


@endsection
